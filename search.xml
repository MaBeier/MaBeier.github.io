<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[websocket]]></title>
      <url>/2017/07/31/websocket/</url>
      <content type="html"><![CDATA[<p>���ߣ�Ovear<br>���ӣ�<a href="https://www.zhihu.com/question/20215561/answer/40316953" target="_blank" rel="external">https://www.zhihu.com/question/20215561/answer/40316953</a><br>��Դ��֪��<br>����Ȩ���������С���ҵת������ϵ���߻�����Ȩ������ҵת����ע��������</p>
<p>�������Ʊ����û�𵽵����ϣ�������ô�ܵ�Nodejs��ȥ�ˡ���Websocketֻ��Э�����ѡ�����һ�������ش���һ��WebSocket��HTML5���Ķ�����Э�飩��Ҳ����˵HTTPЭ��û�б仯������˵û��ϵ����HTTP�ǲ�֧�ֳ־����ӵģ������ӣ�ѭ�����ӵĲ��㣩����HTTP��1.1��1.0֮˵��Ҳ������ν��keep-alive���Ѷ���HTTP�����ϲ�Ϊһ��������Websocket��ʵ��һ����Э�飬��HTTPЭ������û�й�ϵ��ֻ��Ϊ�˼������������������ֹ淶���ѣ�Ҳ����˵����HTTPЭ���ϵ�һ�ֲ�������ͨ������һ��ͼ����&lt;img src=”<a href="https://pic1.zhimg.com/6651f2f811ec133b0e6d7e6d0e194b4c_b.jpg" target="_blank" rel="external">https://pic1.zhimg.com/6651f2f811ec133b0e6d7e6d0e194b4c_b.jpg</a>“ data-rawwidth=”374” data-rawheight=”133” class=”content<em>image” width=”374”&gt;�н��������ǲ�����ȫ�����н��������ǲ�����ȫ��������Html5��ָ��һϵ���µ�API������˵�¹淶���¼�����HttpЭ�鱾��ֻ��1.0��1.1�����Ҹ�Html����û��ֱ�ӹ�ϵ����ͨ����˵����������HTTPЭ�鴫����Html���ݣ���������=��=�ټ�����˵���㼶��һ��������Websocket��ʲô����Э�飬������ʲô�ŵ����ȣ�Websocket��һ���־û���Э�飬������HTTP���ַǳ־õ�Э����˵���򵥵ľٸ����Ӱɣ���ĿǰӦ�ñȽϹ㷺��PHP�������������͡�1) HTTP����������ͨ��Request���綨��Ҳ����һ��Request һ��Response����ô��HTTP1.0�У�����HTTP�����ͽ����ˡ���HTTP1.1�н����˸Ľ���ʹ����һ��keep-alive��Ҳ����˵����һ��HTTP�����У����Է��Ͷ���Request�����ն���Response����������ס Request = Response �� ��HTTP����Զ��������Ҳ����˵һ��requestֻ����һ��response����������responseҲ�Ǳ����ģ������������𡣽�������BB����ô�࣬��Websocket��ʲô��ϵ�أ�</em>(:�١���)_�ðɣ�����׼��˵Websocket�ء�������Websocket�ǻ���HTTPЭ���ģ�����˵������HTTP��Э��������һ�������֡������ֽ׶���һ����——-�����漰רҵ�������ݣ����뿴�Ŀ�������lol:������ֻ���Ӻ�����——–�����������������͵�Websocket���֣�����Wikipedia�ġ�����GET /chat HTTP/1.1<br>Host: server.example.com<br>Upgrade: websocket<br>Connection: Upgrade<br>Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==<br>Sec-WebSocket-Protocol: chat, superchat<br>Sec-WebSocket-Version: 13<br>Origin: <a href="http://example.com" target="_blank" rel="external">http://example.com</a><br>��ϤHTTP��ͯЬ���ܷ����ˣ���������HTTPЭ�������������У����˼����������һ�˳�㽲�������á�Upgrade: websocket<br>Connection: Upgrade<br>��������Websocket�ĺ����ˣ�����Apache��Nginx�ȷ�������ע�������ѷ�������WebsocketЭ�飬���������ҵ���Ӧ����������~�����Ǹ�������HTTP��Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==<br>Sec-WebSocket-Protocol: chat, superchat<br>Sec-WebSocket-Version: 13<br>���ȣ�Sec-WebSocket-Key ��һ��Base64 encode��ֵ���������������������ɵģ����߷���������ú����Ҫ�����ѣ���Ҫ��֤���ǲ���������Websocket������Ȼ����Sec<em>WebSocket-Protocol ��һ���û��������ַ�������������ͬURL�£���ͬ�ķ�������Ҫ��Э�顣�������⣺������Ҫ����A����������~������Sec-WebSocket-Version �Ǹ��߷�������ʹ�õ�Websocket Draft��Э���汾������������ʱ����WebsocketЭ�黹�� Draft �׶Σ����������ֵֹ�Э�鶼�У����һ��кܶ��������ֲֹ�ͬ�Ķ�����ʲôFirefox��Chrome�õĲ���һ���汾֮���ģ�����WebsocketЭ��̫������һ�������⡣���������ڻ��ã��Ѿ���������~���Ҷ�ʹ�õ�һ������~ ��ˮ������Ա����Ҫ����13�����ޡ�</em>��Ȼ���������᷵�����ж�������ʾ�Ѿ����ܵ������� �ɹ�����Websocket����HTTP/1.1 101 Switching Protocols<br>Upgrade: websocket<br>Connection: Upgrade<br>Sec-WebSocket-Accept: HSmrc0sMlYUkAGmm5OPpG2HaGWk=<br>Sec-WebSocket-Protocol: chat<br>���￪ʼ����HTTP���������������ˣ����߿ͻ������Ѿ��ɹ��л�Э����~Upgrade: websocket<br>Connection: Upgrade<br>��Ȼ�ǹ̶��ģ����߿ͻ��˼�����������WebsocketЭ�飬������mozillasocket��lurnarsocket����shitsocket��Ȼ����Sec-WebSocket-Accept �������Ǿ���������ȷ�ϣ����Ҽ��ܹ����� Sec-WebSocket-Key��������������������֪���������㿴�ҵ�ID CARD��֤�����˰ɡ��������ģ�Sec-WebSocket-Protocol ���Ǳ�ʾ����ʹ�õ�Э�顣���ˣ�HTTP�Ѿ����������й����ˣ�������������ȫ����WebsocketЭ�������ˡ�������Э���Ͳ����������ˡ�——————����������������——————&lt;img src=”<a href="https://pic2.zhimg.com/afe119b52e096016139edabc2dfa9661_b.jpg" target="_blank" rel="external">https://pic2.zhimg.com/afe119b52e096016139edabc2dfa9661_b.jpg</a>“ data-rawwidth=”161” data-rawheight=”187” class=”content_image” width=”161”&gt;��TMD��BBB����ô�ã��ǵ���Websocket��ʲô���ã�http long poll������ajax��ѯ��������ʵ��ʵʱ��Ϣ����ô����TMD��BBB����ô�ã��ǵ���Websocket��ʲô���ã�http long poll������ajax��ѯ��������ʵ��ʵʱ��Ϣ����ô��&lt;img src=”<a href="https://pic1.zhimg.com/20110e661edb1e93755a99c1d826e264_b.jpg" target="_blank" rel="external">https://pic1.zhimg.com/20110e661edb1e93755a99c1d826e264_b.jpg</a>“ data-rawwidth=”176” data-rawheight=”193” class=”content_image” width=”176”&gt;�úúã������ˣ�����������һ��Websocket��ʲô�á��������Ե������գ��ܣ����������죩&lt;img src=”<a href="https://pic4.zhimg.com/31ddf0cfbeecef21568d85ca60b5f1ff_b.jpg" target="_blank" rel="external">https://pic4.zhimg.com/31ddf0cfbeecef21568d85ca60b5f1ff_b.jpg</a>“ data-rawwidth=”53” data-rawheight=”65” class=”content_image” width=”53”&gt;����Websocket�������ڽ�Websocket֮ǰ���Ҿ�˳���Ž��� long poll �� ajax��ѯ ��ԭ���������� ajax��ѯ ��ajax��ѯ ��ԭ���ǳ��򵥣������������������ͷ���һ��������ѯ�ʷ������Ƿ�������Ϣ���������֣��ͻ��ˣ�����������û������Ϣ(Request)�����ˣ�û�У�Response���ͻ��ˣ�����������û������Ϣ(Request)�����ˣ�û�С�����Response���ͻ��ˣ�����������û������Ϣ(Request)�����ˣ����÷�����û�а�������Response���ͻ��ˣ�����������û������Ϣ��Request�������ˣ������������������㡣��Response���ͻ��ˣ�����������û������Ϣ��Request�������ˣ�����������û��������û������û�У�Response�� —- looplong poll long poll ��ʵԭ���� ajax��ѯ ��࣬���ǲ�����ѯ�ķ�ʽ��������ȡ��������ģ�ͣ�һֱ���绰��û�յ��Ͳ��ҵ绰����Ҳ����˵���ͻ��˷������Ӻ�������û��Ϣ����һֱ������Response���ͻ��ˡ�ֱ������Ϣ�ŷ��أ�������֮�󣬿ͻ����ٴν������ӣ��ܶ���ʼ���������ֿͻ��ˣ�����������û������Ϣ��û�еĻ��͵����˲ŷ��ظ��Ұɣ�Request�������ˣ����   �ȴ�������Ϣ��ʱ�򡣡��� ���㣨Response���ͻ��ˣ�����������û������Ϣ��û�еĻ��͵����˲ŷ��ظ��Ұɣ�Request�� -loop���������Կ�����ʵ�����ַ�ʽ�������ڲ��ϵؽ���HTTP���ӣ�Ȼ���ȴ������˴�������������HTTPЭ��������һ���ص㣬�����ԡ���Ϊ�������أ���ʵ���ǣ������˲���������ϵ�ͻ��ˣ�ֻ���пͻ��˷��𡣼򵥵�˵���ǣ���������һ�������ı��䣨���Ǹ����������ᡢ���������������ӣ���������˾����������пͻ��������ܶ�ô�۶�Ҫ�úýӴ���˵����������������˵һ˵������ȱ�ݣ�ԭ���ҷϻ���ô����OAQ�������������׿�������������ô�������������ֶ��Ƿǳ�������Դ�ġ�ajax��ѯ ��Ҫ�������кܿ��Ĵ����ٶȺ���Դ�����ٶȣ�long poll ��Ҫ�кܸߵĲ�����Ҳ����˵ͬʱ�Ӵ��ͻ��������������ش�С������ajax��ѯ ��long poll ���п��ܷ��������������ͻ��ˣ�����������������Ϣô�������ˣ�������æ�����Ժ����ԣ�503 Server Unavailable���ͻ��ˣ����������ðɣ���������������Ϣô�������ˣ�������æ�����Ժ����ԣ�503 Server Unavailable���ͻ��ˣ�&lt;img src=”<a href="https://pic1.zhimg.com/7c0cf075c7ee4cc6cf52f4572a4c1c10_b.jpg" target="_blank" rel="external">https://pic1.zhimg.com/7c0cf075c7ee4cc6cf52f4572a4c1c10_b.jpg</a>“ data-rawwidth=”143” data-rawheight=”50” class=”content<em>image” width=”143”&gt;Ȼ����������һ��æ��Ҫ�������䣬��Ҫ�����ı��䣡���ࡣ�����ࡣ�����Ҵ��ˡ��������ǹ�������————————–�Թ�������������˵Websocket��ͨ�������������ӣ����ǿ��Կ����������ַ�ʽ���������õķ�ʽ����Ҫ�ܶ���Դ��һ����Ҫ�������ٶȣ�һ����Ҫ������’�绰’�������ֶ��ᵼ��’�绰’������Խ��Խ�ߡ�Ŷ���ˣ�����˵��HTTP����һ����״̬Э�顣����л�������ĸ�λָ��OAQ��ͨ�׵�˵���ǣ���������Ϊÿ��Ҫ�Ӵ�̫���ͻ��ˣ��Ǹ�����������һ�ҵ绰�����Ͱ����Ķ���ȫ�����ˣ������Ķ���ȫ�����ˡ����ڶ��λ����ٸ��߷�����һ�顣���������������³����ˣ�Websocket�����ˡ���������HTTP���⼸�����⡣���ȣ������ԣ�������������Э����������HTTP-&gt;Websocket���������˾Ϳ�������������Ϣ���ͻ������������������龰�����������޸ġ��ͻ��ˣ�����������Ҫ����WebsocketЭ�飬��Ҫ�ķ�����chat��WebsocketЭ���汾��17��HTTP Request�������ˣ�ok��ȷ�ϣ�������ΪWebsocketЭ�飨HTTP Protocols Switched���ͻ��ˣ��鷳������Ϣ��ʱ�����͸����ޡ��������ˣ�ok���е�ʱ�����������ġ������ˣ�balabalabalabala�����ˣ�balabalabalabala�����ˣ��������������������������ˣ�Ц�����˹��������������ͱ�����������ֻ��Ҫ����һ��HTTP���󣬾Ϳ�������ԴԴ���ϵ���Ϣ�����ˡ����ڳ��������У��������ƽ����ص�������������Ϣ������֪ͨ�ң���������ɵ������ÿ���������㣩������Э������������ͬ�����ӳ٣����һ��ǳ�������Դ��������������ôΪʲô����������������������Դ�������أ���ʵ�������õĳ�����Ҫ�������������ģ���HTTPЭ����Nginx�ȷ������Ľ����£�Ȼ���ٴ��͸���Ӧ��Handler��PHP�ȣ����������򵥵�˵��������һ���ǳ����ٵĽ���Ա��Nginx����������������ת������Ӧ�Ŀͷ���Handler������������Ա�������ٶ����㹻�ģ�����ÿ�ζ����ڿͷ���Handler���ˣ����пͷ������ٶ�̫���������¿ͷ�������Websocket�ͽ���������һ�����⣬�����󣬿���ֱ�Ӹ�����Ա�����־����ӣ�����Ϣ��ʱ���ͷ����취֪ͨ����Ա��Ȼ������Ա��ͳһת�����ͻ��������Ϳ��Խ����ͷ������ٶȹ����������ˡ�ͬʱ���ڴ�ͳ�ķ�ʽ�ϣ�Ҫ���ϵĽ������ر�HTTPЭ�飬����HTTP�Ƿ�״̬�Եģ�ÿ�ζ�Ҫ���´���identity info��������Ϣ���������߷���������˭����Ȼ����Ա�ܿ��٣�����ÿ�ζ�Ҫ����ôһ�ѣ�Ч��Ҳ�������½��ģ�ͬʱ���ò��ϰ���Щ��Ϣת�����ͷ��������˷ѿͷ��Ĵ���ʱ�䣬���һ�������·���������Ĺ���������/ʱ�䡣����Websocketֻ��Ҫһ��HTTP���֣�����˵����ͨѶ�����ǽ�����һ������/״̬�У�Ҳ�ͱ�����HTTP�ķ�״̬�ԣ������˻�һֱ֪��������Ϣ��ֱ�����ر������������ͽ����˽���ԱҪ��������HTTPЭ�飬��Ҫ�鿴identity info����Ϣ��ͬʱ�ɿͻ�����ѯ�ʣ�ת��Ϊ�����������ͣ�����Ϣ��ʱ���ͷ��ͣ���Ȼ�ͻ��˻��ǵ�����������Ϣ�����ġ�������û����Ϣ��ʱ���ͽ�������Ա��Nginx��������Ҫռ�ñ����ٶȾ����Ŀͷ���Handler����——————–������ô�ڲ�֧��Websocket�Ŀͻ�����ʹ��Websocket���������ǣ����ܵ��ǿ���ͨ������˵�� long poll �� ajax ��ѯ�� ģ�������Ƶ�Ч��—–</em>(:�١���)_����д����ƪ���������¡�������OAQ�����ޡ��������������д��󣬻�ӭ�����ڵ�������ָ����~</p>
]]></content>
      
        
        <tags>
            
            <tag> httpϵ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS-原型链的理解]]></title>
      <url>/2017/07/28/JS-%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>一切引用类型来自obj，继承obj.</p>
<h3 id="确定原型和实例之间的关系"><a href="#确定原型和实例之间的关系" class="headerlink" title="确定原型和实例之间的关系:"></a>确定原型和实例之间的关系:</h3><p>实例 instanceof 原型；<br>原型 prototype.isPrototypeOf(实例)</p>
<h3 id="原型链的问题："><a href="#原型链的问题：" class="headerlink" title="原型链的问题："></a>原型链的问题：</h3><p>可能造成，实例是其他函数的原型。其下的实例共享所有属性方法。造成污染。<br>综上实践中很好单独使用原型链</p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><h4 id="借用构造函数："><a href="#借用构造函数：" class="headerlink" title="借用构造函数："></a>借用构造函数：</h4><pre><code class="bash"><span class="keyword">function</span> <span class="function"><span class="title">SuperType</span></span>(){
    this.colors=[<span class="string">'red'</span>,<span class="string">'blue'</span>,<span class="string">'green'</span>]
    }

<span class="keyword">function</span> <span class="function"><span class="title">SubType</span></span>(){
    //继承了SuperType
    SuperType.call(this);
}
var instance1=new SubType();
instance1.colors.push()    //不影响其他实例
</code></pre>
<h4 id="组合集成："><a href="#组合集成：" class="headerlink" title="组合集成："></a>组合集成：</h4><p>使用原型链实现对原型属性和方法的集成，而通过借用构造函数来实现对实例属性的继承</p>
]]></content>
      
        
        <tags>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS-原型的理解]]></title>
      <url>/2017/07/26/JS-%E5%8E%9F%E5%9E%8B%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><h3 id="创建对象3种方法"><a href="#创建对象3种方法" class="headerlink" title="创建对象3种方法"></a>创建对象3种方法</h3><h4 id="1-工厂模式"><a href="#1-工厂模式" class="headerlink" title="1.工厂模式"></a>1.工厂模式</h4><p>解决：创建多个相似的对象；<br>问题：不知道对象的类型；</p>
<h4 id="2-构造函数模式"><a href="#2-构造函数模式" class="headerlink" title="2.构造函数模式"></a>2.构造函数模式</h4><p>解决：特定类型的对象；<br>问题：每定义一个函数，即是实例化了一个对象 ；</p>
<h4 id="3-原型模式"><a href="#3-原型模式" class="headerlink" title="3.原型模式"></a>3.原型模式</h4><p>原型对象包含了这个类型的所有实例共享的属性、方法；<br>(1)每创建一个函数，都自带一个指针:prototype;<br>(2)prototype 指向了函数的原型对象；<br>(3)原型有一个contructor,指向了prototype所在函数;<br>(4)而通过obj.prototype..为原型添加属性方法；</p>
<h4 id="代码读取时，读取到某个属性，先看实例，，若没有，再往上看原型；"><a href="#代码读取时，读取到某个属性，先看实例，，若没有，再往上看原型；" class="headerlink" title="代码读取时，读取到某个属性，先看实例，，若没有，再往上看原型；"></a>代码读取时，读取到某个属性，先看实例，，若没有，再往上看原型；</h4><p>obj.hasOwnProperty(‘属性值’)；<br>//只能检测实例是否有该属性,有true</p>
<p>‘属性值’ in obj<br>//无论原型or实例，只要有该属性就true</p>
<p>obj.hasPrototypeProperty(obj,’属性值’)<br>//只能检测原型是否有该属性,有true</p>
<h3 id="原型对象的问题"><a href="#原型对象的问题" class="headerlink" title="原型对象的问题"></a>原型对象的问题</h3><p>共享本质</p>
<h4 id="实例均共享其原型对象的属性，方法。对于引用类型的属性，例如-，若一个实例-push-，会作用到所有实例。"><a href="#实例均共享其原型对象的属性，方法。对于引用类型的属性，例如-，若一个实例-push-，会作用到所有实例。" class="headerlink" title="实例均共享其原型对象的属性，方法。对于引用类型的属性，例如[]，若一个实例[].push()，会作用到所有实例。"></a>实例均共享其原型对象的属性，方法。对于引用类型的属性，例如[]，若一个实例[].push()，会作用到所有实例。</h4><h3 id="组合使用构造函数模式和原型模式"><a href="#组合使用构造函数模式和原型模式" class="headerlink" title="组合使用构造函数模式和原型模式"></a>组合使用构造函数模式和原型模式</h3><h4 id="构造函数模式用于定义实例属性，而原型模式用于定义方法和共享的属性，使每个实例都有自己的一份实例属性的副本。"><a href="#构造函数模式用于定义实例属性，而原型模式用于定义方法和共享的属性，使每个实例都有自己的一份实例属性的副本。" class="headerlink" title="构造函数模式用于定义实例属性，而原型模式用于定义方法和共享的属性，使每个实例都有自己的一份实例属性的副本。"></a>构造函数模式用于定义实例属性，而原型模式用于定义方法和共享的属性，使每个实例都有自己的一份实例属性的副本。</h4>]]></content>
      
        
        <tags>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[imp_javascript]]></title>
      <url>/2017/07/21/imp-javascript/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[imp_css3]]></title>
      <url>/2017/07/21/imp-css3/</url>
      <content type="html"><![CDATA[<h3 id="居中问题："><a href="#居中问题：" class="headerlink" title="居中问题："></a>居中问题：</h3><pre><code>水平居中：
    1.line元素：
        文本 、图片。给父元素设置。
    2.block元素：
        1.定宽，设置width margin
        2.移动相对位子，position 
        3.margin:0 auto;
          负边距居中 （width:100px;left:50%;margin-left:-50px）
垂直居中：
    父元素height(父元素内容宽度)=line-height(行间距)
    vertical-align:middle
</code></pre><h3 id="网站结构布局优化："><a href="#网站结构布局优化：" class="headerlink" title="网站结构布局优化："></a>网站结构布局优化：</h3><pre><code>简单，扁平化结构（）
</code></pre><h3 id="扁平化结构：控制首页链接数量-不能多不能少-100以内；"><a href="#扁平化结构：控制首页链接数量-不能多不能少-100以内；" class="headerlink" title="扁平化结构：控制首页链接数量 不能多不能少 100以内；"></a>扁平化结构：控制首页链接数量 不能多不能少 100以内；</h3><pre><code>扁平化的目录层次；
3级就能得到网络任何信息，三层目录结构；
导航SEO优化； 一个页面不超过100K 加载速度
</code></pre><h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.f-cb:after&#123;</div><div class="line">		clear: both;</div><div class="line">		content: <span class="string">''</span>;</div><div class="line">		display: block;</div><div class="line">		overflow: hidden;</div><div class="line">		visibility: hidden;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h3 id="background"><a href="#background" class="headerlink" title="background"></a>background</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">background-size: contain;/*即将背景图片等比缩放至某一边紧贴容器边缘为止*/</div><div class="line">background-size: cover;/*高度刚够宽度多的就溢出 反之宽度够高度多的溢出*/</div></pre></td></tr></table></figure>
<h3 id="易忘"><a href="#易忘" class="headerlink" title="易忘"></a>易忘</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">font-style:italic  //斜体</div><div class="line">text-decoration:underline/line-through  //下划线/删除线</div><div class="line">text-indent:2em  //缩进</div><div class="line">letter-spacing  //字间距</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[imp_html5]]></title>
      <url>/2017/07/21/imp-html5/</url>
      <content type="html"><![CDATA[<h3 id="label"><a href="#label" class="headerlink" title="label"></a>label</h3><p>为鼠标用户改进了可用性。如果在 label 元素内点击文本，就会触发此控件。<br>就是说，当用户选择该标签时，浏览器就会自动将焦点转到和标签相关的表单控件上。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;label <span class="keyword">for</span>=<span class="string">'ab'</span>&gt;马贝儿&lt;/label&gt;&lt;input id=<span class="string">"ab"</span>  placeholder=<span class="string">"lalalala"</span>/&gt;</div></pre></td></tr></table></figure></p>
<p> for 属性应当与相关元素的 id 属性相同</p>
<h3 id="datalist"><a href="#datalist" class="headerlink" title="datalist"></a>datalist</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;input placeholder =<span class="string">"请选择您喜欢的手机品牌"</span> list=<span class="string">"phonelist"</span> /&gt;</div><div class="line">&lt;datalist id=<span class="string">"phonelist"</span>&gt;</div><div class="line">   &lt;option value=<span class="string">"iphone"</span>&gt;iphone&lt;/option&gt;</div><div class="line">   &lt;option value=<span class="string">"sam"</span>&gt;sam&lt;/option&gt;</div><div class="line">   &lt;option value=<span class="string">"huawei"</span>&gt;huawei&lt;/option&gt;</div><div class="line">   &lt;option value=<span class="string">"htc"</span>&gt;htc&lt;/option&gt;</div><div class="line">   &lt;option value=<span class="string">"meizu"</span>&gt;meizu&lt;/option&gt;</div><div class="line">&lt;/datalist&gt;</div></pre></td></tr></table></figure>
<h3 id="details"><a href="#details" class="headerlink" title="details"></a>details</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;details &gt;</div><div class="line">  &lt;summary&gt;html5&lt;/summary&gt;</div><div class="line">  &lt;p&gt;w3school 在线教程 HTML 系列教程</div><div class="line">&lt;/details&gt;</div><div class="line">&lt;details&gt;</div><div class="line">  &lt;summary&gt;css&lt;/summary&gt;</div><div class="line">  &lt;p&gt;adfadf&lt;/p&gt;</div><div class="line">&lt;/details&gt;</div></pre></td></tr></table></figure>
<h3 id="form"><a href="#form" class="headerlink" title="form"></a>form</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;form oninput=<span class="string">"totalprice.value=parseInt(price.value)*parseInt(number.value)"</span>&gt;</div><div class="line">  &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> id=<span class="string">"price"</span> value=<span class="string">"5000"</span>&gt;</div><div class="line">  *&lt;input <span class="built_in">type</span>=<span class="string">"number"</span> id=<span class="string">"number"</span> value=<span class="string">"1"</span>&gt;</div><div class="line">  =&lt;output name=<span class="string">"totalprice"</span> <span class="keyword">for</span>=<span class="string">"price number"</span>&gt;&lt;/output&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<h3 id="meter-progress"><a href="#meter-progress" class="headerlink" title="meter/progress"></a>meter/progress</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;meter value=<span class="string">"210"</span> min=<span class="string">"20"</span> max=<span class="string">"380"</span> low=<span class="string">"200"</span> high=<span class="string">"240"</span> optimum=<span class="string">"220"</span>&gt; &lt;/meter&gt;</div><div class="line">&lt;meter value=<span class="string">"0.75"</span> &gt; 75%&lt;/meter&gt;</div><div class="line">&lt;progress value=<span class="string">"30"</span> max=<span class="string">"100"</span>&gt;&lt;/progress&gt;</div><div class="line">&lt;progress  max=<span class="string">"200"</span>&gt;</div></pre></td></tr></table></figure>
<h3 id="input"><a href="#input" class="headerlink" title="input"></a>input</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;input <span class="built_in">type</span>=<span class="string">"email"</span> name=<span class="string">"email"</span>&gt;</div><div class="line">&lt;input <span class="built_in">type</span>=<span class="string">"url"</span> name=<span class="string">"url"</span>&gt;</div><div class="line">&lt;input <span class="built_in">type</span>=<span class="string">"tel"</span> name =<span class="string">"tel"</span>&gt;</div><div class="line">&lt;input <span class="built_in">type</span>=<span class="string">"number"</span> name=<span class="string">"number"</span>&gt;&lt;br&gt;</div><div class="line">date:&lt;input <span class="built_in">type</span>=<span class="string">"date"</span> name=<span class="string">"date"</span>&gt;&lt;br&gt;</div><div class="line">month: &lt;input <span class="built_in">type</span>=<span class="string">"month"</span> name=<span class="string">"month"</span>&gt;&lt;br&gt;</div><div class="line">week:&lt;input <span class="built_in">type</span>=<span class="string">"week"</span> name=<span class="string">"week"</span>&gt;&lt;br&gt;</div><div class="line">time:&lt;input <span class="built_in">type</span>=<span class="string">"time"</span> name=<span class="string">"time"</span>&gt;&lt;br&gt;</div><div class="line">datetime:&lt;input <span class="built_in">type</span>=<span class="string">"datetime"</span> name=<span class="string">"datetime"</span>&gt;&lt;br&gt;</div><div class="line">datetime-local:&lt;input <span class="built_in">type</span>=<span class="string">"datetime-local"</span> name=<span class="string">"datetime-local"</span>&gt;&lt;br&gt;</div><div class="line">range:&lt;input <span class="built_in">type</span>=<span class="string">"range"</span> name=<span class="string">"range"</span> min=<span class="string">"1"</span> max=<span class="string">"10"</span>&gt;&lt;br&gt;</div><div class="line">search:&lt;input <span class="built_in">type</span>=<span class="string">"search"</span> name=<span class="string">"search"</span>&gt;&lt;br&gt;</div><div class="line">&lt;input <span class="built_in">type</span>=<span class="string">"color"</span> name=<span class="string">"color"</span>&gt;</div></pre></td></tr></table></figure>
<h3 id="form-1"><a href="#form-1" class="headerlink" title="form"></a>form</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;form action=<span class="string">"3-1.html"</span> autocomplete=<span class="string">"on"</span>&gt;</div><div class="line">  user:&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> name=<span class="string">"text"</span> autofocus=<span class="string">"autofocus"</span> required=<span class="string">"required"</span>&gt;&lt;br&gt;</div><div class="line">  email:&lt;input <span class="built_in">type</span>=<span class="string">"email"</span> name=<span class="string">"email"</span> autocomplete=<span class="string">"off"</span> multiple=<span class="string">"multiple"</span> required=<span class="string">"required"</span>&gt;&lt;br&gt;</div><div class="line">  file:&lt;input <span class="built_in">type</span>=<span class="string">"file"</span> name=<span class="string">"file"</span> multiple=<span class="string">"multiple"</span>&gt;&lt;br&gt;</div><div class="line">  &lt;input <span class="built_in">type</span>=<span class="string">"submit"</span>&gt;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> html5 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[koa框架--实现webservice相关功能]]></title>
      <url>/2017/07/19/koa%E6%A1%86%E6%9E%B6-%E5%AE%9E%E7%8E%B0webservice%E7%9B%B8%E5%85%B3%E5%8A%9F%E8%83%BD/</url>
      <content type="html"><![CDATA[<p>nodejs–koa框架 实现webservice相关功能<br>–koa工作及搭建网站雏形</p>
<pre><code>1.静态资源访问能力 2.数据访问
</code></pre><p>1.koa的引入以及实例化<br>    var koa=require(‘koa’)–引进koa<br>    var app=koa()—实例化</p>
<p>2.中间件介绍<br>    2.1 koa-route—中间件，提供一个路由功能<br>            var controller=require(‘koa-route’)</p>
<pre><code>启用
app.use(controller.get(url,function*(){
    异步函数}
));
</code></pre><p>监听app.listen(端口）</p>
<p>怎样把数据内容放在模板里去渲染，<br>    渲染模板：1.访问url然后返回一个模板，2.一个静态文件返回到浏览器<br>    2.2 co-view—中间件<br>        var views=require(‘co-view’)<br>        实例化 var render=views(‘指定模板根目录’,{<br>            //指定模板渲染类型<br>            map:{html:’ejs’}<br>            });<br>        例子：<br>        app.use(controller.get(‘/ejs_test’,function*(){<br>        this.set(‘Cache-Control’,’no-chache’);//页面不缓存，设置http返回头不缓存；<br>        this.body = yield render(‘test’,{title:’title_test’});//es6 异步执行<br>    }));</p>
<p>访问静态资源目录：<br>    2.3 koa-static-server—中间件，集成静态文件的中间键<br>        var koa_static = require(‘koa-static-server’);<br>        //静态资源<br>            app.use(koa_static({<br>                rootDir:’./static/‘,//去这里找资源<br>                rootPath:’/static/‘,//输入URL<br>                maxage : 0 //缓存<br>            }));</p>
<p>调用后端服务接口：<br>    数据是前后端交互<br>    service:连通前后端数据，后端数据转换成JSON传给前端<br>    mock数据：<br>        怎么暴露给前端？<br>        service部分：<br>            使用mock需要访问文件系统，用node里fs模块<br>                var fs=require(‘fs’)<br>            把方法暴露出去<br>                exports.get_test_data = function(){<br>                    var content = fs.readFileSync(‘./mock/test.json’,’utf-8’);<br>                    return content;<br>                }</p>
<pre><code>app.js部分
    var service = require(&apos;./service/webAppService.js&apos;);

    app.use(controller.get(&apos;/ajax/rank&apos;,function*(){
    this.set(&apos;Cache-Control&apos;,&apos;no-chache&apos;);//页面不缓存，设置http返回头不缓存；
    this.body = service.get_rank_data();
}));
</code></pre><p>nodejs连接线上http接口<br>    nodejs很少去连接数据库（性能不高），通常用nodejs去调用后端已经写好的http格式的接口；<br>    请求转发接口转发。和数据模拟是相互互补。<br>        service部分：<br>        exports.get_search_data = function(start,end,keyword){<br>        return function(cb){<br>        //http模块，node自带，发送请求<br>            var http = require(‘http’);<br>        //node自带模块，querystring方法<br>            var qs = require(‘querystring’);//这个模块是将对象转换成http查询参数<br>            var data = {<br>                s : keyword,<br>                start : start,<br>                end :end<br>            };<br>                //指定发送的接口 地址 端口 路径 方法<br>            var content = qs.stringify(data);<br>            var http_request = {<br>                hostname : ‘dushu.xiaomi.com’,<br>                port : 80,<br>                path : ‘/store/v0/lib/query/onebox?’ +content<br>            }<br>            req_obj = http.request(http_request,function(_res){<br>                var content = ‘’;<br>                _res.setEncoding(‘utf8’);<br>                _res.on(‘data’,function(chunk){<br>                    content += chunk;<br>                });<br>                _res.on(‘end’,function(){<br>                    cb(null,content);<br>                });</p>
<pre><code>        });
        //监听
        req_obj.on(&apos;error&apos;,function(){

        });
        req_obj.end();

app.js部分
    app.use(controller.get(&apos;/ajax/search&apos;,function*(){
        this.set(&apos;Cache-Control&apos;,&apos;no-chache&apos;);//页面不缓存，设置http返回头不缓存；
        var querystring = require(&apos;querystring&apos;);
        var params = querystring.parse(this.req._parsedUrl.query);//http反解到obj
        var start = params.start;
        var end = params.end;
        var keyword = params.keyword;
        this.body = yield service.get_search_data(start,end,keyword);//yield异步返回
    }));
</code></pre><p>为什么要对接口 进行转发？<br>    通过nodejs把接口再转发一次与直接使用后端接口相比，优缺点如何?实际开发为何采用这种方式？<br>    dushu.xiaomi.com:90/store/v0/lib/query/onebox?   vs   127.0.0.1:3000/ajax/search?<br>    感觉路径更清晰，而且接口的域名也统一了。但是查询的时候要多走一步。</p>
<pre><code>如果业务层接口需要聚合多个数据源 和 不同业务 不同域的服务 怎么办？Node层最大的价值在于取代了web接入层
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> koa web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于nodejs服务端的搭建开发]]></title>
      <url>/2017/07/19/%E5%9F%BA%E4%BA%8Enodejs%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91/</url>
      <content type="html"><![CDATA[<p>webApp服务器搭建：<br>    基于nodejs的服务端的搭建和开发</p>
<pre><code>工程完整的目录结构的搭建：
    一般结构如下：
        mock--模拟数据，用于测试；
        node_modules--生成的各种包，根据package.json依赖，npm install拉取至本地；
        service--服务端的调用，调用数据；
        static--css、img、js静态资源文件；
        view--项目的模板文件；
        app.js--项目启动文件；
        package.json；


        其中：
        数据提供方:mock、http线上接口
        service：连通前后端数据管理的文件， 后端的数据文件经过转换成JSON文件提供给前端
                 本质上：读取模拟数据，并把数据文件暴露返回
        app.js： 数据访问接口暴露 
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> Node.js web </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
