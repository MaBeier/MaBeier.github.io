<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[websocket]]></title>
      <url>/2017/07/31/webSocket1/</url>
      <content type="html"><![CDATA[<p>作者：Ovear<br>链接：<a href="https://www.zhihu.com/question/20215561/answer/40316953" target="_blank" rel="external">https://www.zhihu.com/question/20215561/answer/40316953</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<h3 id="一、WebSocket是HTML5出的东西（协议），也就是说HTTP协议没有变化，或者说没关系，但HTTP是不支持持久连接的（长连接，循环连接的不算）"><a href="#一、WebSocket是HTML5出的东西（协议），也就是说HTTP协议没有变化，或者说没关系，但HTTP是不支持持久连接的（长连接，循环连接的不算）" class="headerlink" title="一、WebSocket是HTML5出的东西（协议），也就是说HTTP协议没有变化，或者说没关系，但HTTP是不支持持久连接的（长连接，循环连接的不算）"></a>一、WebSocket是HTML5出的东西（协议），也就是说HTTP协议没有变化，或者说没关系，但HTTP是不支持持久连接的（长连接，循环连接的不算）</h3><p>首先HTTP有1.1和1.0之说，也就是所谓的keep-alive，把多个HTTP请求合并为一个，但是Websocket其实是一个新协议，跟HTTP协议基本没有关系，只是为了兼容现有浏览器的握手规范而已，也就是说它是HTTP协议上的一种补充,即是交集，有交集，但是并不是全部。<br>另外Html5是指的一系列新的API，或者说新规范，新技术。Http协议本身只有1.0和1.1，而且跟Html本身没有直接关系。。通俗来说，你可以用HTTP协议传输非Html数据，就是这样。再简单来说，层级不一样。</p>
<h3 id="二、Websocket是什么样的协议，具体有什么优点"><a href="#二、Websocket是什么样的协议，具体有什么优点" class="headerlink" title="二、Websocket是什么样的协议，具体有什么优点"></a>二、Websocket是什么样的协议，具体有什么优点</h3><p>首先，Websocket是一个持久化的协议，相对于HTTP这种非持久的协议来说。<br>简单的举个例子吧，用目前应用比较广泛的PHP生命周期来解释。<br>1) HTTP的生命周期通过Request来界定，也就是一个Request 一个Response，那么在HTTP1.0中，这次HTTP请求就结束了。<br>在HTTP1.1中进行了改进，使得有一个keep-alive，也就是说，在一个HTTP连接中，可以发送多个Request，接收多个Response。<br>但是请记住 Request = Response ， 在HTTP中永远是这样，也就是说一个request只能有一个response。而且这个response也是被动的，不能主动发起。</p>
<h4 id="教练，你BB了这么多，跟Websocket有什么关系呢？"><a href="#教练，你BB了这么多，跟Websocket有什么关系呢？" class="headerlink" title="教练，你BB了这么多，跟Websocket有什么关系呢？"></a>教练，你BB了这么多，跟Websocket有什么关系呢？</h4><p>好吧，我正准备说Websocket呢。。首先Websocket是基于HTTP协议的，或者说借用了HTTP的协议来完成一部分握手。<br>在握手阶段是一样的<br>——-以下涉及专业技术内容，不想看的可以跳过lol:，或者只看加黑内容——–<br>首先我们来看个典型的Websocket握手（借用Wikipedia的。。）</p>
<pre><code class="bash">GET /chat HTTP/1.1
Host: server.example.com
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==
Sec-WebSocket-Protocol: chat, superchat
Sec-WebSocket-Version: 13
Origin: http://example.com
</code></pre>
<p>熟悉HTTP的童鞋可能发现了，这段类似HTTP协议的握手请求中，多了几个东西。<br>我会顺便讲解下作用。</p>
<pre><code class="bash">Upgrade: websocket
Connection: Upgrade
</code></pre>
<p>这个就是Websocket的核心了，告诉Apache、Nginx等服务器：注意啦，窝发起的是Websocket协议，快点帮我找到对应的助理处理~不是那个老土的HTTP。</p>
<pre><code class="bash">Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==
Sec-WebSocket-Protocol: chat, superchat
Sec-WebSocket-Version: 13
</code></pre>
<p>首先，Sec-WebSocket-Key 是一个Base64 encode的值，这个是浏览器随机生成的，告诉服务器：泥煤，不要忽悠窝，我要验证尼是不是真的是Websocket助理。<br>然后，SecWebSocket-Protocol 是一个用户定义的字符串，用来区分同URL下，不同的服务所需要的协议。简单理解：今晚我要服务A，别搞错啦~<br>最后，Sec-WebSocket-Version 是告诉服务器所使用的Websocket Draft（协议版本），在最初的时候，Websocket协议还在 Draft 阶段，各种奇奇怪怪的协议都有，而且还有很多期奇奇怪怪不同的东西，什么Firefox和Chrome用的不是一个版本之类的，当初Websocket协议太多可是一个大难题。。不过现在还好，已经定下来啦~大家都使用的一个东西~ 脱水：服务员，我要的是13岁的噢→_→<br>然后服务器会返回下列东西，表示已经接受到请求， 成功建立Websocket啦！</p>
<pre><code class="bash">HTTP/1.1 101 Switching Protocols
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Accept: HSmrc0sMlYUkAGmm5OPpG2HaGWk=
Sec-WebSocket-Protocol: chat
</code></pre>
<p>这里开始就是HTTP最后负责的区域了，告诉客户，我已经成功切换协议啦~</p>
<p>``` bashUpgrade: websocket<br>Connection: Upgrade</p>
<pre><code>
依然是固定的，告诉客户端即将升级的是Websocket协议，而不是mozillasocket，lurnarsocket或者shitsocket。
然后，Sec-WebSocket-Accept 这个则是经过服务器确认，并且加密过后的 Sec-WebSocket-Key。服务器：好啦好啦，知道啦，给你看我的ID CARD来证明行了吧。。
后面的，Sec-WebSocket-Protocol 则是表示最终使用的协议。

至此，HTTP已经完成它所有工作了，接下来就是完全按照Websocket协议进行了。具体的协议就不在这阐述了。
------------------技术解析部分完毕------------------

#### 你TMD又BBB了这么久，那到底Websocket有什么鬼用，http long poll，或者ajax轮询不都可以实现实时信息传递么.
好好好，年轻人，那我们来讲一讲Websocket有什么用。来给你吃点胡（苏）萝（丹）卜（红）

### 三、Websocket的作用
在讲Websocket之前，我就顺带着讲下 long poll 和 ajax轮询 的原理。
首先是 ajax轮询 ，ajax轮询 的原理非常简单，让浏览器隔个几秒就发送一次请求，询问服务器是否有新信息。

``` bash
场景再现：
客户端：啦啦啦，有没有新信息(Request)
服务端：没有（Response）
客户端：啦啦啦，有没有新信息(Request)
服务端：没有。。（Response）
客户端：啦啦啦，有没有新信息(Request)
服务端：你好烦啊，没有啊。。（Response）
客户端：啦啦啦，有没有新消息（Request）
服务端：好啦好啦，有啦给你。（Response）
客户端：啦啦啦，有没有新消息（Request）
服务端：。。。。。没。。。。没。。。没有（Response） ---- loop
</code></pre><p>long poll<br>long poll 其实原理跟 ajax轮询 差不多，都是采用轮询的方式，不过采取的是阻塞模型（一直打电话，没收到就不挂电话），也就是说，客户端发起连接后，如果没消息，就一直不返回Response给客户端。直到有消息才返回，返回完之后，客户端再次建立连接，周而复始。</p>
<pre><code class="bash">场景再现
客户端：啦啦啦，有没有新信息，没有的话就等有了才返回给我吧（Request）
服务端：额。。   等待到有消息的时候。。来 给你（Response）
客户端：啦啦啦，有没有新信息，没有的话就等有了才返回给我吧（Request） -loop
</code></pre>
<p>从上面可以看出其实这两种方式，都是在不断地建立HTTP连接，然后等待服务端处理，可以体现HTTP协议的另外一个特点，被动性。<br>何为被动性呢，其实就是，服务端不能主动联系客户端，只能有客户端发起。<br>简单地说就是，服务器是一个很懒的冰箱（这是个梗）（不会、不能主动发起连接），但是上司有命令，如果有客户来，不管多么累都要好好接待。</p>
<p>说完这个，我们再来说一说上面的缺陷（原谅我废话这么多吧OAQ）<br>从上面很容易看出来，不管怎么样，上面这两种都是非常消耗资源的。<br>ajax轮询 需要服务器有很快的处理速度和资源。（速度）<br>long poll 需要有很高的并发，也就是说同时接待客户的能力。（场地大小）<br>所以ajax轮询 和long poll 都有可能发生这种情况。</p>
<pre><code class="bash">客户端：啦啦啦啦，有新信息么？
服务端：月线正忙，请稍后再试（503 Server Unavailable）
客户端：。。。。好吧，啦啦啦，有新信息么？
服务端：月线正忙，请稍后再试（503 Server Unavailable）
然后服务端在一旁忙的要死：冰箱，我要更多的冰箱！更多。。更多。。（我错了。。这又是梗。。）
</code></pre>
<h3 id="言归正传，我们来说Websocket吧"><a href="#言归正传，我们来说Websocket吧" class="headerlink" title="言归正传，我们来说Websocket吧"></a>言归正传，我们来说Websocket吧</h3><p>通过上面这个例子，我们可以看出，这两种方式都不是最好的方式，需要很多资源。<br>一种需要更快的速度，一种需要更多的’电话’。这两种都会导致’电话’的需求越来越高。<br>哦对了，忘记说了HTTP还是一个无状态协议。（感谢评论区的各位指出OAQ）<br>通俗的说就是，服务器因为每天要接待太多客户了，是个健忘鬼，你一挂电话，他就把你的东西全忘光了，把你的东西全丢掉了。你第二次还得再告诉服务器一遍。</p>
<p>所以在这种情况下出现了，Websocket出现了。<br>他解决了HTTP的这几个难题。<br>首先，被动性，当服务器完成协议升级后（HTTP-&gt;Websocket），服务端就可以主动推送信息给客户端啦。所以上面的情景可以做如下修改。</p>
<pre><code class="bash">客户端：啦啦啦，我要建立Websocket协议，需要的服务:chat,Websocket协议版本:17(HTTP Request)
服务端：ok，确认，已升级为Websocket协议（HTTP Protocols Switched）
客户端：麻烦你有信息的时候推送给我噢。。
服务端：ok，有的时候会告诉你的。
服务端：balabalabalabala
服务端：balabalabalabala
服务端：哈哈哈哈哈啊哈哈哈哈
服务端：笑死我了哈哈哈哈哈哈哈
</code></pre>
<p>就变成了这样，只需要经过一次HTTP请求，就可以做到源源不断的信息传送了。（在程序设计中，这种设计叫做回调，即：你有信息了再来通知我，而不是我傻乎乎的每次跑来问你）</p>
<p>这样的协议解决了上面同步有延迟，而且还非常消耗资源的这种情况。<br>那么为什么他会解决服务器上消耗资源的问题呢？</p>
<p>其实我们所用的程序是要经过两层代理的，即HTTP协议在Nginx等服务器的解析下，然后再传送给相应的Handler（PHP等）来处理。</p>
<p>简单地说，我们有一个非常快速的接线员（Nginx），他负责把问题转交给相应的客服（Handler）。<br>本身接线员基本上速度是足够的，但是每次都卡在客服（Handler）了，老有客服处理速度太慢。，导致客服不够。<br>Websocket就解决了这样一个难题，建立后，可以直接跟接线员建立持久连接，有信息的时候客服想办法通知接线员，然后接线员在统一转交给客户。<br>这样就可以解决客服处理速度过慢的问题了。</p>
<p>同时，在传统的方式上，要不断的建立，关闭HTTP协议，由于HTTP是非状态性的，每次都要重新传输identity info（鉴别信息），来告诉服务端你是谁。</p>
<p>虽然接线员很快速，但是每次都要听这么一堆，效率也会有所下降的，同时还得不断把这些信息转交给客服，不但浪费客服的处理时间，而且还会在网路传输中消耗过多的流量/时间。</p>
<p>但是Websocket只需要一次HTTP握手，所以说整个通讯过程是建立在一次连接/状态中，也就避免了HTTP的非状态性，服务端会一直知道你的信息，直到你关闭请求，这样就解决了接线员要反复解析HTTP协议，还要查看identity info的信息。</p>
<p>同时由客户主动询问，转换为服务器（推送）有信息的时候就发送（当然客户端还是等主动发送信息过来的。。），没有信息的时候就交给接线员（Nginx），不需要占用本身速度就慢的客服（Handler）了</p>
<p>至于怎么在不支持Websocket的客户端上使用Websocket。。答案是：不能但是可以通过上面说的 long poll 和 ajax 轮询来 模拟出类似的效果</p>
]]></content>
      
        
        <tags>
            
            <tag> http系 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[websocket]]></title>
      <url>/2017/07/28/webSocket/</url>
      <content type="html"><![CDATA[<p>作者：Ovear<br>链接：<a href="https://www.zhihu.com/question/20215561/answer/40316953" target="_blank" rel="external">https://www.zhihu.com/question/20215561/answer/40316953</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<h3 id="一、WebSocket是HTML5出的东西（协议），也就是说HTTP协议没有变化，或者说没关系，但HTTP是不支持持久连接的（长连接，循环连接的不算）"><a href="#一、WebSocket是HTML5出的东西（协议），也就是说HTTP协议没有变化，或者说没关系，但HTTP是不支持持久连接的（长连接，循环连接的不算）" class="headerlink" title="一、WebSocket是HTML5出的东西（协议），也就是说HTTP协议没有变化，或者说没关系，但HTTP是不支持持久连接的（长连接，循环连接的不算）"></a>一、WebSocket是HTML5出的东西（协议），也就是说HTTP协议没有变化，或者说没关系，但HTTP是不支持持久连接的（长连接，循环连接的不算）</h3><p>首先HTTP有1.1和1.0之说，也就是所谓的keep-alive，把多个HTTP请求合并为一个，但是Websocket其实是一个新协议，跟HTTP协议基本没有关系，只是为了兼容现有浏览器的握手规范而已，也就是说它是HTTP协议上的一种补充,即是交集，有交集，但是并不是全部。<br>另外Html5是指的一系列新的API，或者说新规范，新技术。Http协议本身只有1.0和1.1，而且跟Html本身没有直接关系。。通俗来说，你可以用HTTP协议传输非Html数据，就是这样。再简单来说，层级不一样。</p>
<h3 id="二、Websocket是什么样的协议，具体有什么优点"><a href="#二、Websocket是什么样的协议，具体有什么优点" class="headerlink" title="二、Websocket是什么样的协议，具体有什么优点"></a>二、Websocket是什么样的协议，具体有什么优点</h3><p>首先，Websocket是一个持久化的协议，相对于HTTP这种非持久的协议来说。<br>简单的举个例子吧，用目前应用比较广泛的PHP生命周期来解释。<br>1) HTTP的生命周期通过Request来界定，也就是一个Request 一个Response，那么在HTTP1.0中，这次HTTP请求就结束了。<br>在HTTP1.1中进行了改进，使得有一个keep-alive，也就是说，在一个HTTP连接中，可以发送多个Request，接收多个Response。<br>但是请记住 Request = Response ， 在HTTP中永远是这样，也就是说一个request只能有一个response。而且这个response也是被动的，不能主动发起。</p>
<h4 id="教练，你BB了这么多，跟Websocket有什么关系呢？"><a href="#教练，你BB了这么多，跟Websocket有什么关系呢？" class="headerlink" title="教练，你BB了这么多，跟Websocket有什么关系呢？"></a>教练，你BB了这么多，跟Websocket有什么关系呢？</h4><p>好吧，我正准备说Websocket呢。。首先Websocket是基于HTTP协议的，或者说借用了HTTP的协议来完成一部分握手。<br>在握手阶段是一样的<br>——-以下涉及专业技术内容，不想看的可以跳过lol:，或者只看加黑内容——–<br>首先我们来看个典型的Websocket握手（借用Wikipedia的。。）</p>
<pre><code class="bash">GET /chat HTTP/1.1
Host: server.example.com
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==
Sec-WebSocket-Protocol: chat, superchat
Sec-WebSocket-Version: 13
Origin: http://example.com
</code></pre>
<p>熟悉HTTP的童鞋可能发现了，这段类似HTTP协议的握手请求中，多了几个东西。<br>我会顺便讲解下作用。</p>
<pre><code class="bash">Upgrade: websocket
Connection: Upgrade
</code></pre>
<p>这个就是Websocket的核心了，告诉Apache、Nginx等服务器：注意啦，窝发起的是Websocket协议，快点帮我找到对应的助理处理~不是那个老土的HTTP。</p>
<pre><code class="bash">Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==
Sec-WebSocket-Protocol: chat, superchat
Sec-WebSocket-Version: 13
</code></pre>
<p>首先，Sec-WebSocket-Key 是一个Base64 encode的值，这个是浏览器随机生成的，告诉服务器：泥煤，不要忽悠窝，我要验证尼是不是真的是Websocket助理。<br>然后，SecWebSocket-Protocol 是一个用户定义的字符串，用来区分同URL下，不同的服务所需要的协议。简单理解：今晚我要服务A，别搞错啦~<br>最后，Sec-WebSocket-Version 是告诉服务器所使用的Websocket Draft（协议版本），在最初的时候，Websocket协议还在 Draft 阶段，各种奇奇怪怪的协议都有，而且还有很多期奇奇怪怪不同的东西，什么Firefox和Chrome用的不是一个版本之类的，当初Websocket协议太多可是一个大难题。。不过现在还好，已经定下来啦~大家都使用的一个东西~ 脱水：服务员，我要的是13岁的噢→_→<br>然后服务器会返回下列东西，表示已经接受到请求， 成功建立Websocket啦！</p>
<pre><code class="bash">HTTP/1.1 101 Switching Protocols
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Accept: HSmrc0sMlYUkAGmm5OPpG2HaGWk=
Sec-WebSocket-Protocol: chat
</code></pre>
<p>这里开始就是HTTP最后负责的区域了，告诉客户，我已经成功切换协议啦~</p>
<p>``` bashUpgrade: websocket<br>Connection: Upgrade</p>
<pre><code>
依然是固定的，告诉客户端即将升级的是Websocket协议，而不是mozillasocket，lurnarsocket或者shitsocket。
然后，Sec-WebSocket-Accept 这个则是经过服务器确认，并且加密过后的 Sec-WebSocket-Key。服务器：好啦好啦，知道啦，给你看我的ID CARD来证明行了吧。。
后面的，Sec-WebSocket-Protocol 则是表示最终使用的协议。

至此，HTTP已经完成它所有工作了，接下来就是完全按照Websocket协议进行了。具体的协议就不在这阐述了。
------------------技术解析部分完毕------------------

#### 你TMD又BBB了这么久，那到底Websocket有什么鬼用，http long poll，或者ajax轮询不都可以实现实时信息传递么.
好好好，年轻人，那我们来讲一讲Websocket有什么用。来给你吃点胡（苏）萝（丹）卜（红）

### 三、Websocket的作用
在讲Websocket之前，我就顺带着讲下 long poll 和 ajax轮询 的原理。
首先是 ajax轮询 ，ajax轮询 的原理非常简单，让浏览器隔个几秒就发送一次请求，询问服务器是否有新信息。

``` bash
场景再现：
客户端：啦啦啦，有没有新信息(Request)
服务端：没有（Response）
客户端：啦啦啦，有没有新信息(Request)
服务端：没有。。（Response）
客户端：啦啦啦，有没有新信息(Request)
服务端：你好烦啊，没有啊。。（Response）
客户端：啦啦啦，有没有新消息（Request）
服务端：好啦好啦，有啦给你。（Response）
客户端：啦啦啦，有没有新消息（Request）
服务端：。。。。。没。。。。没。。。没有（Response） ---- loop
</code></pre><p>long poll<br>long poll 其实原理跟 ajax轮询 差不多，都是采用轮询的方式，不过采取的是阻塞模型（一直打电话，没收到就不挂电话），也就是说，客户端发起连接后，如果没消息，就一直不返回Response给客户端。直到有消息才返回，返回完之后，客户端再次建立连接，周而复始。</p>
<pre><code class="bash">场景再现
客户端：啦啦啦，有没有新信息，没有的话就等有了才返回给我吧（Request）
服务端：额。。   等待到有消息的时候。。来 给你（Response）
客户端：啦啦啦，有没有新信息，没有的话就等有了才返回给我吧（Request） -loop
</code></pre>
<p>从上面可以看出其实这两种方式，都是在不断地建立HTTP连接，然后等待服务端处理，可以体现HTTP协议的另外一个特点，被动性。<br>何为被动性呢，其实就是，服务端不能主动联系客户端，只能有客户端发起。<br>简单地说就是，服务器是一个很懒的冰箱（这是个梗）（不会、不能主动发起连接），但是上司有命令，如果有客户来，不管多么累都要好好接待。</p>
<p>说完这个，我们再来说一说上面的缺陷（原谅我废话这么多吧OAQ）<br>从上面很容易看出来，不管怎么样，上面这两种都是非常消耗资源的。<br>ajax轮询 需要服务器有很快的处理速度和资源。（速度）<br>long poll 需要有很高的并发，也就是说同时接待客户的能力。（场地大小）<br>所以ajax轮询 和long poll 都有可能发生这种情况。</p>
<pre><code class="bash">客户端：啦啦啦啦，有新信息么？
服务端：月线正忙，请稍后再试（503 Server Unavailable）
客户端：。。。。好吧，啦啦啦，有新信息么？
服务端：月线正忙，请稍后再试（503 Server Unavailable）
然后服务端在一旁忙的要死：冰箱，我要更多的冰箱！更多。。更多。。（我错了。。这又是梗。。）
</code></pre>
<h3 id="言归正传，我们来说Websocket吧"><a href="#言归正传，我们来说Websocket吧" class="headerlink" title="言归正传，我们来说Websocket吧"></a>言归正传，我们来说Websocket吧</h3><p>通过上面这个例子，我们可以看出，这两种方式都不是最好的方式，需要很多资源。<br>一种需要更快的速度，一种需要更多的’电话’。这两种都会导致’电话’的需求越来越高。<br>哦对了，忘记说了HTTP还是一个无状态协议。（感谢评论区的各位指出OAQ）<br>通俗的说就是，服务器因为每天要接待太多客户了，是个健忘鬼，你一挂电话，他就把你的东西全忘光了，把你的东西全丢掉了。你第二次还得再告诉服务器一遍。</p>
<p>所以在这种情况下出现了，Websocket出现了。<br>他解决了HTTP的这几个难题。<br>首先，被动性，当服务器完成协议升级后（HTTP-&gt;Websocket），服务端就可以主动推送信息给客户端啦。所以上面的情景可以做如下修改。</p>
<pre><code class="bash">客户端：啦啦啦，我要建立Websocket协议，需要的服务:chat,Websocket协议版本:17(HTTP Request)
服务端：ok，确认，已升级为Websocket协议（HTTP Protocols Switched）
客户端：麻烦你有信息的时候推送给我噢。。
服务端：ok，有的时候会告诉你的。
服务端：balabalabalabala
服务端：balabalabalabala
服务端：哈哈哈哈哈啊哈哈哈哈
服务端：笑死我了哈哈哈哈哈哈哈
</code></pre>
<p>就变成了这样，只需要经过一次HTTP请求，就可以做到源源不断的信息传送了。（在程序设计中，这种设计叫做回调，即：你有信息了再来通知我，而不是我傻乎乎的每次跑来问你）</p>
<p>这样的协议解决了上面同步有延迟，而且还非常消耗资源的这种情况。<br>那么为什么他会解决服务器上消耗资源的问题呢？</p>
<p>其实我们所用的程序是要经过两层代理的，即HTTP协议在Nginx等服务器的解析下，然后再传送给相应的Handler（PHP等）来处理。</p>
<p>简单地说，我们有一个非常快速的接线员（Nginx），他负责把问题转交给相应的客服（Handler）。<br>本身接线员基本上速度是足够的，但是每次都卡在客服（Handler）了，老有客服处理速度太慢。，导致客服不够。<br>Websocket就解决了这样一个难题，建立后，可以直接跟接线员建立持久连接，有信息的时候客服想办法通知接线员，然后接线员在统一转交给客户。<br>这样就可以解决客服处理速度过慢的问题了。</p>
<p>同时，在传统的方式上，要不断的建立，关闭HTTP协议，由于HTTP是非状态性的，每次都要重新传输identity info（鉴别信息），来告诉服务端你是谁。</p>
<p>虽然接线员很快速，但是每次都要听这么一堆，效率也会有所下降的，同时还得不断把这些信息转交给客服，不但浪费客服的处理时间，而且还会在网路传输中消耗过多的流量/时间。</p>
<p>但是Websocket只需要一次HTTP握手，所以说整个通讯过程是建立在一次连接/状态中，也就避免了HTTP的非状态性，服务端会一直知道你的信息，直到你关闭请求，这样就解决了接线员要反复解析HTTP协议，还要查看identity info的信息。</p>
<p>同时由客户主动询问，转换为服务器（推送）有信息的时候就发送（当然客户端还是等主动发送信息过来的。。），没有信息的时候就交给接线员（Nginx），不需要占用本身速度就慢的客服（Handler）了</p>
<p>至于怎么在不支持Websocket的客户端上使用Websocket。。答案是：不能但是可以通过上面说的 long poll 和 ajax 轮询来 模拟出类似的效果</p>
]]></content>
      
        
        <tags>
            
            <tag> http </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS-原型链的理解]]></title>
      <url>/2017/07/28/JS-%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>一切引用类型来自obj，继承obj.</p>
<h3 id="确定原型和实例之间的关系"><a href="#确定原型和实例之间的关系" class="headerlink" title="确定原型和实例之间的关系:"></a>确定原型和实例之间的关系:</h3><p>实例 instanceof 原型；<br>原型 prototype.isPrototypeOf(实例)</p>
<h3 id="原型链的问题："><a href="#原型链的问题：" class="headerlink" title="原型链的问题："></a>原型链的问题：</h3><p>可能造成，实例是其他函数的原型。其下的实例共享所有属性方法。造成污染。<br>综上实践中很好单独使用原型链</p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><h4 id="借用构造函数："><a href="#借用构造函数：" class="headerlink" title="借用构造函数："></a>借用构造函数：</h4><pre><code class="bash"><span class="keyword">function</span> <span class="function"><span class="title">SuperType</span></span>(){
    this.colors=[<span class="string">'red'</span>,<span class="string">'blue'</span>,<span class="string">'green'</span>]
    }

<span class="keyword">function</span> <span class="function"><span class="title">SubType</span></span>(){
    //继承了SuperType
    SuperType.call(this);
}
var instance1=new SubType();
instance1.colors.push()    //不影响其他实例
</code></pre>
<h4 id="组合集成："><a href="#组合集成：" class="headerlink" title="组合集成："></a>组合集成：</h4><p>使用原型链实现对原型属性和方法的集成，而通过借用构造函数来实现对实例属性的继承</p>
]]></content>
      
        
        <tags>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS-原型的理解]]></title>
      <url>/2017/07/26/JS-%E5%8E%9F%E5%9E%8B%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><h3 id="创建对象3种方法"><a href="#创建对象3种方法" class="headerlink" title="创建对象3种方法"></a>创建对象3种方法</h3><h4 id="1-工厂模式"><a href="#1-工厂模式" class="headerlink" title="1.工厂模式"></a>1.工厂模式</h4><p>解决：创建多个相似的对象；<br>问题：不知道对象的类型；</p>
<h4 id="2-构造函数模式"><a href="#2-构造函数模式" class="headerlink" title="2.构造函数模式"></a>2.构造函数模式</h4><p>解决：特定类型的对象；<br>问题：每定义一个函数，即是实例化了一个对象 ；</p>
<h4 id="3-原型模式"><a href="#3-原型模式" class="headerlink" title="3.原型模式"></a>3.原型模式</h4><p>原型对象包含了这个类型的所有实例共享的属性、方法；<br>(1)每创建一个函数，都自带一个指针:prototype;<br>(2)prototype 指向了函数的原型对象；<br>(3)原型有一个contructor,指向了prototype所在函数;<br>(4)而通过obj.prototype..为原型添加属性方法；</p>
<h4 id="代码读取时，读取到某个属性，先看实例，，若没有，再往上看原型；"><a href="#代码读取时，读取到某个属性，先看实例，，若没有，再往上看原型；" class="headerlink" title="代码读取时，读取到某个属性，先看实例，，若没有，再往上看原型；"></a>代码读取时，读取到某个属性，先看实例，，若没有，再往上看原型；</h4><p>obj.hasOwnProperty(‘属性值’)；<br>//只能检测实例是否有该属性,有true</p>
<p>‘属性值’ in obj<br>//无论原型or实例，只要有该属性就true</p>
<p>obj.hasPrototypeProperty(obj,’属性值’)<br>//只能检测原型是否有该属性,有true</p>
<h3 id="原型对象的问题"><a href="#原型对象的问题" class="headerlink" title="原型对象的问题"></a>原型对象的问题</h3><p>共享本质</p>
<h4 id="实例均共享其原型对象的属性，方法。对于引用类型的属性，例如-，若一个实例-push-，会作用到所有实例。"><a href="#实例均共享其原型对象的属性，方法。对于引用类型的属性，例如-，若一个实例-push-，会作用到所有实例。" class="headerlink" title="实例均共享其原型对象的属性，方法。对于引用类型的属性，例如[]，若一个实例[].push()，会作用到所有实例。"></a>实例均共享其原型对象的属性，方法。对于引用类型的属性，例如[]，若一个实例[].push()，会作用到所有实例。</h4><h3 id="组合使用构造函数模式和原型模式"><a href="#组合使用构造函数模式和原型模式" class="headerlink" title="组合使用构造函数模式和原型模式"></a>组合使用构造函数模式和原型模式</h3><h4 id="构造函数模式用于定义实例属性，而原型模式用于定义方法和共享的属性，使每个实例都有自己的一份实例属性的副本。"><a href="#构造函数模式用于定义实例属性，而原型模式用于定义方法和共享的属性，使每个实例都有自己的一份实例属性的副本。" class="headerlink" title="构造函数模式用于定义实例属性，而原型模式用于定义方法和共享的属性，使每个实例都有自己的一份实例属性的副本。"></a>构造函数模式用于定义实例属性，而原型模式用于定义方法和共享的属性，使每个实例都有自己的一份实例属性的副本。</h4>]]></content>
      
        
        <tags>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[imp_javascript]]></title>
      <url>/2017/07/21/imp-javascript/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[imp_css3]]></title>
      <url>/2017/07/21/imp-css3/</url>
      <content type="html"><![CDATA[<h3 id="居中问题："><a href="#居中问题：" class="headerlink" title="居中问题："></a>居中问题：</h3><pre><code>水平居中：
    1.line元素：
        文本 、图片。给父元素设置。
    2.block元素：
        1.定宽，设置width margin
        2.移动相对位子，position 
        3.margin:0 auto;
          负边距居中 （width:100px;left:50%;margin-left:-50px）
垂直居中：
    父元素height(父元素内容宽度)=line-height(行间距)
    vertical-align:middle
</code></pre><h3 id="网站结构布局优化："><a href="#网站结构布局优化：" class="headerlink" title="网站结构布局优化："></a>网站结构布局优化：</h3><pre><code>简单，扁平化结构（）
</code></pre><h3 id="扁平化结构：控制首页链接数量-不能多不能少-100以内；"><a href="#扁平化结构：控制首页链接数量-不能多不能少-100以内；" class="headerlink" title="扁平化结构：控制首页链接数量 不能多不能少 100以内；"></a>扁平化结构：控制首页链接数量 不能多不能少 100以内；</h3><pre><code>扁平化的目录层次；
3级就能得到网络任何信息，三层目录结构；
导航SEO优化； 一个页面不超过100K 加载速度
</code></pre><h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.f-cb:after&#123;</div><div class="line">		clear: both;</div><div class="line">		content: <span class="string">''</span>;</div><div class="line">		display: block;</div><div class="line">		overflow: hidden;</div><div class="line">		visibility: hidden;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h3 id="background"><a href="#background" class="headerlink" title="background"></a>background</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">background-size: contain;/*即将背景图片等比缩放至某一边紧贴容器边缘为止*/</div><div class="line">background-size: cover;/*高度刚够宽度多的就溢出 反之宽度够高度多的溢出*/</div></pre></td></tr></table></figure>
<h3 id="易忘"><a href="#易忘" class="headerlink" title="易忘"></a>易忘</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">font-style:italic  //斜体</div><div class="line">text-decoration:underline/line-through  //下划线/删除线</div><div class="line">text-indent:2em  //缩进</div><div class="line">letter-spacing  //字间距</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[imp_html5]]></title>
      <url>/2017/07/21/imp-html5/</url>
      <content type="html"><![CDATA[<h3 id="label"><a href="#label" class="headerlink" title="label"></a>label</h3><p>为鼠标用户改进了可用性。如果在 label 元素内点击文本，就会触发此控件。<br>就是说，当用户选择该标签时，浏览器就会自动将焦点转到和标签相关的表单控件上。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;label <span class="keyword">for</span>=<span class="string">'ab'</span>&gt;马贝儿&lt;/label&gt;&lt;input id=<span class="string">"ab"</span>  placeholder=<span class="string">"lalalala"</span>/&gt;</div></pre></td></tr></table></figure></p>
<p> for 属性应当与相关元素的 id 属性相同</p>
<h3 id="datalist"><a href="#datalist" class="headerlink" title="datalist"></a>datalist</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;input placeholder =<span class="string">"请选择您喜欢的手机品牌"</span> list=<span class="string">"phonelist"</span> /&gt;</div><div class="line">&lt;datalist id=<span class="string">"phonelist"</span>&gt;</div><div class="line">   &lt;option value=<span class="string">"iphone"</span>&gt;iphone&lt;/option&gt;</div><div class="line">   &lt;option value=<span class="string">"sam"</span>&gt;sam&lt;/option&gt;</div><div class="line">   &lt;option value=<span class="string">"huawei"</span>&gt;huawei&lt;/option&gt;</div><div class="line">   &lt;option value=<span class="string">"htc"</span>&gt;htc&lt;/option&gt;</div><div class="line">   &lt;option value=<span class="string">"meizu"</span>&gt;meizu&lt;/option&gt;</div><div class="line">&lt;/datalist&gt;</div></pre></td></tr></table></figure>
<h3 id="details"><a href="#details" class="headerlink" title="details"></a>details</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;details &gt;</div><div class="line">  &lt;summary&gt;html5&lt;/summary&gt;</div><div class="line">  &lt;p&gt;w3school 在线教程 HTML 系列教程</div><div class="line">&lt;/details&gt;</div><div class="line">&lt;details&gt;</div><div class="line">  &lt;summary&gt;css&lt;/summary&gt;</div><div class="line">  &lt;p&gt;adfadf&lt;/p&gt;</div><div class="line">&lt;/details&gt;</div></pre></td></tr></table></figure>
<h3 id="form"><a href="#form" class="headerlink" title="form"></a>form</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;form oninput=<span class="string">"totalprice.value=parseInt(price.value)*parseInt(number.value)"</span>&gt;</div><div class="line">  &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> id=<span class="string">"price"</span> value=<span class="string">"5000"</span>&gt;</div><div class="line">  *&lt;input <span class="built_in">type</span>=<span class="string">"number"</span> id=<span class="string">"number"</span> value=<span class="string">"1"</span>&gt;</div><div class="line">  =&lt;output name=<span class="string">"totalprice"</span> <span class="keyword">for</span>=<span class="string">"price number"</span>&gt;&lt;/output&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<h3 id="meter-progress"><a href="#meter-progress" class="headerlink" title="meter/progress"></a>meter/progress</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;meter value=<span class="string">"210"</span> min=<span class="string">"20"</span> max=<span class="string">"380"</span> low=<span class="string">"200"</span> high=<span class="string">"240"</span> optimum=<span class="string">"220"</span>&gt; &lt;/meter&gt;</div><div class="line">&lt;meter value=<span class="string">"0.75"</span> &gt; 75%&lt;/meter&gt;</div><div class="line">&lt;progress value=<span class="string">"30"</span> max=<span class="string">"100"</span>&gt;&lt;/progress&gt;</div><div class="line">&lt;progress  max=<span class="string">"200"</span>&gt;</div></pre></td></tr></table></figure>
<h3 id="input"><a href="#input" class="headerlink" title="input"></a>input</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;input <span class="built_in">type</span>=<span class="string">"email"</span> name=<span class="string">"email"</span>&gt;</div><div class="line">&lt;input <span class="built_in">type</span>=<span class="string">"url"</span> name=<span class="string">"url"</span>&gt;</div><div class="line">&lt;input <span class="built_in">type</span>=<span class="string">"tel"</span> name =<span class="string">"tel"</span>&gt;</div><div class="line">&lt;input <span class="built_in">type</span>=<span class="string">"number"</span> name=<span class="string">"number"</span>&gt;&lt;br&gt;</div><div class="line">date:&lt;input <span class="built_in">type</span>=<span class="string">"date"</span> name=<span class="string">"date"</span>&gt;&lt;br&gt;</div><div class="line">month: &lt;input <span class="built_in">type</span>=<span class="string">"month"</span> name=<span class="string">"month"</span>&gt;&lt;br&gt;</div><div class="line">week:&lt;input <span class="built_in">type</span>=<span class="string">"week"</span> name=<span class="string">"week"</span>&gt;&lt;br&gt;</div><div class="line">time:&lt;input <span class="built_in">type</span>=<span class="string">"time"</span> name=<span class="string">"time"</span>&gt;&lt;br&gt;</div><div class="line">datetime:&lt;input <span class="built_in">type</span>=<span class="string">"datetime"</span> name=<span class="string">"datetime"</span>&gt;&lt;br&gt;</div><div class="line">datetime-local:&lt;input <span class="built_in">type</span>=<span class="string">"datetime-local"</span> name=<span class="string">"datetime-local"</span>&gt;&lt;br&gt;</div><div class="line">range:&lt;input <span class="built_in">type</span>=<span class="string">"range"</span> name=<span class="string">"range"</span> min=<span class="string">"1"</span> max=<span class="string">"10"</span>&gt;&lt;br&gt;</div><div class="line">search:&lt;input <span class="built_in">type</span>=<span class="string">"search"</span> name=<span class="string">"search"</span>&gt;&lt;br&gt;</div><div class="line">&lt;input <span class="built_in">type</span>=<span class="string">"color"</span> name=<span class="string">"color"</span>&gt;</div></pre></td></tr></table></figure>
<h3 id="form-1"><a href="#form-1" class="headerlink" title="form"></a>form</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;form action=<span class="string">"3-1.html"</span> autocomplete=<span class="string">"on"</span>&gt;</div><div class="line">  user:&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> name=<span class="string">"text"</span> autofocus=<span class="string">"autofocus"</span> required=<span class="string">"required"</span>&gt;&lt;br&gt;</div><div class="line">  email:&lt;input <span class="built_in">type</span>=<span class="string">"email"</span> name=<span class="string">"email"</span> autocomplete=<span class="string">"off"</span> multiple=<span class="string">"multiple"</span> required=<span class="string">"required"</span>&gt;&lt;br&gt;</div><div class="line">  file:&lt;input <span class="built_in">type</span>=<span class="string">"file"</span> name=<span class="string">"file"</span> multiple=<span class="string">"multiple"</span>&gt;&lt;br&gt;</div><div class="line">  &lt;input <span class="built_in">type</span>=<span class="string">"submit"</span>&gt;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> html5 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[koa框架--实现webservice相关功能]]></title>
      <url>/2017/07/19/koa%E6%A1%86%E6%9E%B6-%E5%AE%9E%E7%8E%B0webservice%E7%9B%B8%E5%85%B3%E5%8A%9F%E8%83%BD/</url>
      <content type="html"><![CDATA[<p>nodejs–koa框架 实现webservice相关功能<br>–koa工作及搭建网站雏形</p>
<pre><code>1.静态资源访问能力 2.数据访问
</code></pre><p>1.koa的引入以及实例化<br>    var koa=require(‘koa’)–引进koa<br>    var app=koa()—实例化</p>
<p>2.中间件介绍<br>    2.1 koa-route—中间件，提供一个路由功能<br>            var controller=require(‘koa-route’)</p>
<pre><code>启用
app.use(controller.get(url,function*(){
    异步函数}
));
</code></pre><p>监听app.listen(端口）</p>
<p>怎样把数据内容放在模板里去渲染，<br>    渲染模板：1.访问url然后返回一个模板，2.一个静态文件返回到浏览器<br>    2.2 co-view—中间件<br>        var views=require(‘co-view’)<br>        实例化 var render=views(‘指定模板根目录’,{<br>            //指定模板渲染类型<br>            map:{html:’ejs’}<br>            });<br>        例子：<br>        app.use(controller.get(‘/ejs_test’,function*(){<br>        this.set(‘Cache-Control’,’no-chache’);//页面不缓存，设置http返回头不缓存；<br>        this.body = yield render(‘test’,{title:’title_test’});//es6 异步执行<br>    }));</p>
<p>访问静态资源目录：<br>    2.3 koa-static-server—中间件，集成静态文件的中间键<br>        var koa_static = require(‘koa-static-server’);<br>        //静态资源<br>            app.use(koa_static({<br>                rootDir:’./static/‘,//去这里找资源<br>                rootPath:’/static/‘,//输入URL<br>                maxage : 0 //缓存<br>            }));</p>
<p>调用后端服务接口：<br>    数据是前后端交互<br>    service:连通前后端数据，后端数据转换成JSON传给前端<br>    mock数据：<br>        怎么暴露给前端？<br>        service部分：<br>            使用mock需要访问文件系统，用node里fs模块<br>                var fs=require(‘fs’)<br>            把方法暴露出去<br>                exports.get_test_data = function(){<br>                    var content = fs.readFileSync(‘./mock/test.json’,’utf-8’);<br>                    return content;<br>                }</p>
<pre><code>app.js部分
    var service = require(&apos;./service/webAppService.js&apos;);

    app.use(controller.get(&apos;/ajax/rank&apos;,function*(){
    this.set(&apos;Cache-Control&apos;,&apos;no-chache&apos;);//页面不缓存，设置http返回头不缓存；
    this.body = service.get_rank_data();
}));
</code></pre><p>nodejs连接线上http接口<br>    nodejs很少去连接数据库（性能不高），通常用nodejs去调用后端已经写好的http格式的接口；<br>    请求转发接口转发。和数据模拟是相互互补。<br>        service部分：<br>        exports.get_search_data = function(start,end,keyword){<br>        return function(cb){<br>        //http模块，node自带，发送请求<br>            var http = require(‘http’);<br>        //node自带模块，querystring方法<br>            var qs = require(‘querystring’);//这个模块是将对象转换成http查询参数<br>            var data = {<br>                s : keyword,<br>                start : start,<br>                end :end<br>            };<br>                //指定发送的接口 地址 端口 路径 方法<br>            var content = qs.stringify(data);<br>            var http_request = {<br>                hostname : ‘dushu.xiaomi.com’,<br>                port : 80,<br>                path : ‘/store/v0/lib/query/onebox?’ +content<br>            }<br>            req_obj = http.request(http_request,function(_res){<br>                var content = ‘’;<br>                _res.setEncoding(‘utf8’);<br>                _res.on(‘data’,function(chunk){<br>                    content += chunk;<br>                });<br>                _res.on(‘end’,function(){<br>                    cb(null,content);<br>                });</p>
<pre><code>        });
        //监听
        req_obj.on(&apos;error&apos;,function(){

        });
        req_obj.end();

app.js部分
    app.use(controller.get(&apos;/ajax/search&apos;,function*(){
        this.set(&apos;Cache-Control&apos;,&apos;no-chache&apos;);//页面不缓存，设置http返回头不缓存；
        var querystring = require(&apos;querystring&apos;);
        var params = querystring.parse(this.req._parsedUrl.query);//http反解到obj
        var start = params.start;
        var end = params.end;
        var keyword = params.keyword;
        this.body = yield service.get_search_data(start,end,keyword);//yield异步返回
    }));
</code></pre><p>为什么要对接口 进行转发？<br>    通过nodejs把接口再转发一次与直接使用后端接口相比，优缺点如何?实际开发为何采用这种方式？<br>    dushu.xiaomi.com:90/store/v0/lib/query/onebox?   vs   127.0.0.1:3000/ajax/search?<br>    感觉路径更清晰，而且接口的域名也统一了。但是查询的时候要多走一步。</p>
<pre><code>如果业务层接口需要聚合多个数据源 和 不同业务 不同域的服务 怎么办？Node层最大的价值在于取代了web接入层
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> koa web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于nodejs服务端的搭建开发]]></title>
      <url>/2017/07/19/%E5%9F%BA%E4%BA%8Enodejs%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91/</url>
      <content type="html"><![CDATA[<p>webApp服务器搭建：<br>    基于nodejs的服务端的搭建和开发</p>
<pre><code>工程完整的目录结构的搭建：
    一般结构如下：
        mock--模拟数据，用于测试；
        node_modules--生成的各种包，根据package.json依赖，npm install拉取至本地；
        service--服务端的调用，调用数据；
        static--css、img、js静态资源文件；
        view--项目的模板文件；
        app.js--项目启动文件；
        package.json；


        其中：
        数据提供方:mock、http线上接口
        service：连通前后端数据管理的文件， 后端的数据文件经过转换成JSON文件提供给前端
                 本质上：读取模拟数据，并把数据文件暴露返回
        app.js： 数据访问接口暴露 
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> Node.js web </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
