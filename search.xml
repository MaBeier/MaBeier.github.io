<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[interest_javascript]]></title>
      <url>/2017/07/21/interest-javascript/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[interest_css3]]></title>
      <url>/2017/07/21/interest-css3/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[interest_html5]]></title>
      <url>/2017/07/21/imp-html5/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[koa框架--实现webservice相关功能]]></title>
      <url>/2017/07/19/koa%E6%A1%86%E6%9E%B6-%E5%AE%9E%E7%8E%B0webservice%E7%9B%B8%E5%85%B3%E5%8A%9F%E8%83%BD/</url>
      <content type="html"><![CDATA[<p>nodejs–koa框架 实现webservice相关功能<br>–koa工作及搭建网站雏形</p>
<pre><code>1.静态资源访问能力 2.数据访问
</code></pre><p>1.koa的引入以及实例化<br>    var koa=require(‘koa’)–引进koa<br>    var app=koa()—实例化</p>
<p>2.中间件介绍<br>    2.1 koa-route—中间件，提供一个路由功能<br>            var controller=require(‘koa-route’)</p>
<pre><code>启用
app.use(controller.get(url,function*(){
    异步函数}
));
</code></pre><p>监听app.listen(端口）</p>
<p>怎样把数据内容放在模板里去渲染，<br>    渲染模板：1.访问url然后返回一个模板，2.一个静态文件返回到浏览器<br>    2.2 co-view—中间件<br>        var views=require(‘co-view’)<br>        实例化 var render=views(‘指定模板根目录’,{<br>            //指定模板渲染类型<br>            map:{html:’ejs’}<br>            });<br>        例子：<br>        app.use(controller.get(‘/ejs_test’,function*(){<br>        this.set(‘Cache-Control’,’no-chache’);//页面不缓存，设置http返回头不缓存；<br>        this.body = yield render(‘test’,{title:’title_test’});//es6 异步执行<br>    }));</p>
<p>访问静态资源目录：<br>    2.3 koa-static-server—中间件，集成静态文件的中间键<br>        var koa_static = require(‘koa-static-server’);<br>        //静态资源<br>            app.use(koa_static({<br>                rootDir:’./static/‘,//去这里找资源<br>                rootPath:’/static/‘,//输入URL<br>                maxage : 0 //缓存<br>            }));</p>
<p>调用后端服务接口：<br>    数据是前后端交互<br>    service:连通前后端数据，后端数据转换成JSON传给前端<br>    mock数据：<br>        怎么暴露给前端？<br>        service部分：<br>            使用mock需要访问文件系统，用node里fs模块<br>                var fs=require(‘fs’)<br>            把方法暴露出去<br>                exports.get_test_data = function(){<br>                    var content = fs.readFileSync(‘./mock/test.json’,’utf-8’);<br>                    return content;<br>                }</p>
<pre><code>app.js部分
    var service = require(&apos;./service/webAppService.js&apos;);

    app.use(controller.get(&apos;/ajax/rank&apos;,function*(){
    this.set(&apos;Cache-Control&apos;,&apos;no-chache&apos;);//页面不缓存，设置http返回头不缓存；
    this.body = service.get_rank_data();
}));
</code></pre><p>nodejs连接线上http接口<br>    nodejs很少去连接数据库（性能不高），通常用nodejs去调用后端已经写好的http格式的接口；<br>    请求转发接口转发。和数据模拟是相互互补。<br>        service部分：<br>        exports.get_search_data = function(start,end,keyword){<br>        return function(cb){<br>        //http模块，node自带，发送请求<br>            var http = require(‘http’);<br>        //node自带模块，querystring方法<br>            var qs = require(‘querystring’);//这个模块是将对象转换成http查询参数<br>            var data = {<br>                s : keyword,<br>                start : start,<br>                end :end<br>            };<br>                //指定发送的接口 地址 端口 路径 方法<br>            var content = qs.stringify(data);<br>            var http_request = {<br>                hostname : ‘dushu.xiaomi.com’,<br>                port : 80,<br>                path : ‘/store/v0/lib/query/onebox?’ +content<br>            }<br>            req_obj = http.request(http_request,function(_res){<br>                var content = ‘’;<br>                _res.setEncoding(‘utf8’);<br>                _res.on(‘data’,function(chunk){<br>                    content += chunk;<br>                });<br>                _res.on(‘end’,function(){<br>                    cb(null,content);<br>                });</p>
<pre><code>        });
        //监听
        req_obj.on(&apos;error&apos;,function(){

        });
        req_obj.end();

app.js部分
    app.use(controller.get(&apos;/ajax/search&apos;,function*(){
        this.set(&apos;Cache-Control&apos;,&apos;no-chache&apos;);//页面不缓存，设置http返回头不缓存；
        var querystring = require(&apos;querystring&apos;);
        var params = querystring.parse(this.req._parsedUrl.query);//http反解到obj
        var start = params.start;
        var end = params.end;
        var keyword = params.keyword;
        this.body = yield service.get_search_data(start,end,keyword);//yield异步返回
    }));
</code></pre><p>为什么要对接口 进行转发？<br>    通过nodejs把接口再转发一次与直接使用后端接口相比，优缺点如何?实际开发为何采用这种方式？<br>    dushu.xiaomi.com:90/store/v0/lib/query/onebox?   vs   127.0.0.1:3000/ajax/search?<br>    感觉路径更清晰，而且接口的域名也统一了。但是查询的时候要多走一步。</p>
<pre><code>如果业务层接口需要聚合多个数据源 和 不同业务 不同域的服务 怎么办？Node层最大的价值在于取代了web接入层
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> koa web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于nodejs服务端的搭建开发]]></title>
      <url>/2017/07/19/%E5%9F%BA%E4%BA%8Enodejs%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91/</url>
      <content type="html"><![CDATA[<p>webApp服务器搭建：<br>    基于nodejs的服务端的搭建和开发</p>
<pre><code>工程完整的目录结构的搭建：
    一般结构如下：
        mock--模拟数据，用于测试；
        node_modules--生成的各种包，根据package.json依赖，npm install拉取至本地；
        service--服务端的调用，调用数据；
        static--css、img、js静态资源文件；
        view--项目的模板文件；
        app.js--项目启动文件；
        package.json；


        其中：
        数据提供方:mock、http线上接口
        service：连通前后端数据管理的文件， 后端的数据文件经过转换成JSON文件提供给前端
                 本质上：读取模拟数据，并把数据文件暴露返回
        app.js： 数据访问接口暴露 
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> Node.js web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/07/19/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
